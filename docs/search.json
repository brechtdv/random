[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Fitting distributions\n\n\n\n\n\nSome useful functions to fit distributions to means, confidence intervals and standard errors\n\n\n\n\n\n\nInvalid Date\n\n\n\n\n\n\n  \n\n\n\n\nSIR model\n\n\n\n\n\nDifferent implementations of the basic SIR model\n\n\n\n\n\n\nInvalid Date\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am head of the Service Health information at Sciensano, the Belgian institute for health. I am also appointed as visiting professor in Risk Analysis at Ghent University. As a senior epidemiologist, I conduct policy-driven public health research in the domain of composite measures of population health and health inequalities. Currently, I am coordinating the Belgian National Burden of Disease Study, and chairing the European Burden of Disease Network (COST Action CA18218). As a member of the World Health Organization Foodborne Disease Burden Epidemiology Reference Group (WHO/FERG), I am also contributing to the estimation of the global burden of foodborne disease. I have PhD degrees in Public Health and Veterinary Sciences, and MSc degrees in Biostatistics and Veterinary Medicine.\nMy full cv is available via brechtdv.github.io."
  },
  {
    "objectID": "posts/01-fitting-distributions/index.html",
    "href": "posts/01-fitting-distributions/index.html",
    "title": "Fitting distributions",
    "section": "",
    "text": "## function for fitting\nfit_beta <-\nfunction (par, p = 0.95) {\n  target <- par[2:3]\n  p <- c(0, p) + (1 - p)/2\n  f <-\n  function(x, mean, p, target) {\n    dev <- qbeta(p = p, shape1 = x, shape2 = x/mean - x)\n    return(sum((dev - target)^2))\n  }\n  shape1 <-\n    optimize(f, c(0, 1e4), mean = par[1], p = p, target = target)$minimum\n  shape2 <- shape1 / par[1] - shape1\n  return(list(shape1 = shape1, shape2 = shape2))\n}\n\n## function for simulating from fitted distribution\nsim_beta <-\n  function(n, ...) {\n    fit <- fit_beta(...)\n    return(rbeta(n, fit$shape1, fit$shape2))\n  }\n\n## disability weights for diarrhea\ndw_dia_mld <- c(0.074, 0.049, 0.104)\ndw_dia_mod <- c(0.188, 0.125, 0.264)\ndw_dia_sev <- c(0.247, 0.164, 0.348)\n\n## simulate from fitted Beta distribution\nn <- 1e5\nsim_dw_dia_mld <- sim_beta(n, dw_dia_mld)\nsim_dw_dia_mod <- sim_beta(n, dw_dia_mod)\nsim_dw_dia_sev <- sim_beta(n, dw_dia_sev)\n\n## compare fitted to observed values\nsummarize <-\n  function(x, probs = c(0.025, 0.975), ...) {\n    c(mean = mean(x, ...),\n      quantile(x, probs, ...))\n  }\n\nrbind(observed = dw_dia_mld, fitted = summarize(sim_dw_dia_mld))\n\n               mean      2.5%     97.5%\nobserved 0.07400000 0.0490000 0.1040000\nfitted   0.07404733 0.0487965 0.1038908\n\nrbind(observed = dw_dia_mod, fitted = summarize(sim_dw_dia_mod))\n\n              mean      2.5%     97.5%\nobserved 0.1880000 0.1250000 0.2640000\nfitted   0.1879728 0.1232797 0.2627209\n\nrbind(observed = dw_dia_sev, fitted = summarize(sim_dw_dia_sev))\n\n             mean      2.5%     97.5%\nobserved 0.247000 0.1640000 0.3480000\nfitted   0.246645 0.1597582 0.3448211\n\n## visualize random values\nboxplot(\n  las = 1,\n  ylab = \"Disability Weight\",\n  cbind(\"Mild\" = sim_dw_dia_mld,\n        \"Moderate\" = sim_dw_dia_mod,\n        \"Severe\" = sim_dw_dia_sev))"
  },
  {
    "objectID": "posts/01-fitting-distributions/index.html#heading",
    "href": "posts/01-fitting-distributions/index.html#heading",
    "title": "My Post",
    "section": "Heading",
    "text": "Heading\n\nsessionInfo()\n\nR version 4.2.1 (2022-06-23 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19044)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_Belgium.utf8  LC_CTYPE=English_Belgium.utf8   \n[3] LC_MONETARY=English_Belgium.utf8 LC_NUMERIC=C                    \n[5] LC_TIME=English_Belgium.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] digest_0.6.29     jsonlite_1.8.0    magrittr_2.0.3    evaluate_0.16    \n [5] rlang_1.0.6       stringi_1.7.8     cli_3.4.1         rstudioapi_0.14  \n [9] rmarkdown_2.16    tools_4.2.1       stringr_1.4.1     htmlwidgets_1.5.4\n[13] xfun_0.32         yaml_2.3.5        fastmap_1.1.0     compiler_4.2.1   \n[17] htmltools_0.5.3   knitr_1.40"
  },
  {
    "objectID": "posts/01-fitting-distributions/index.html#gamma-distribution",
    "href": "posts/01-fitting-distributions/index.html#gamma-distribution",
    "title": "Fitting distributions",
    "section": "Gamma distribution",
    "text": "Gamma distribution\n\n## function for fitting\nfit_gamma <-\nfunction(q, p = 0.95) {\n  p <- c(0, p) + (1 - p)/2\n\n  f <-\n    function(x, p, target) {\n      dev <- qgamma(p = p, shape = x[1], rate = x[2])\n      return(sum((dev - target) ^ 2))\n    }\n\n  fit <- optim(par = c(1, 1), fn = f, p = p, target = q)\n\n  return(fit$par)\n}"
  },
  {
    "objectID": "posts/fitting-distributions/index.html",
    "href": "posts/fitting-distributions/index.html",
    "title": "Fitting distributions",
    "section": "",
    "text": "## function for fitting\nfit_beta <-\nfunction (par, p = 0.95) {\n  target <- par[2:3]\n  p <- c(0, p) + (1 - p)/2\n  f <-\n  function(x, mean, p, target) {\n    dev <- qbeta(p = p, shape1 = x, shape2 = x/mean - x)\n    return(sum((dev - target)^2))\n  }\n  shape1 <-\n    optimize(f, c(0, 1e4), mean = par[1], p = p, target = target)$minimum\n  shape2 <- shape1 / par[1] - shape1\n  return(list(shape1 = shape1, shape2 = shape2))\n}\n\n## function for simulating from fitted distribution\nsim_beta <-\n  function(n, ...) {\n    fit <- fit_beta(...)\n    return(rbeta(n, fit$shape1, fit$shape2))\n  }\n\n## disability weights for diarrhea\ndw_dia_mld <- c(0.074, 0.049, 0.104)\ndw_dia_mod <- c(0.188, 0.125, 0.264)\ndw_dia_sev <- c(0.247, 0.164, 0.348)\n\n## simulate from fitted Beta distribution\nn <- 1e5\nsim_dw_dia_mld <- sim_beta(n, dw_dia_mld)\nsim_dw_dia_mod <- sim_beta(n, dw_dia_mod)\nsim_dw_dia_sev <- sim_beta(n, dw_dia_sev)\n\n## compare fitted to observed values\nsummarize <-\n  function(x, probs = c(0.025, 0.975), ...) {\n    c(mean = mean(x, ...),\n      quantile(x, probs, ...))\n  }\n\nrbind(observed = dw_dia_mld, fitted = summarize(sim_dw_dia_mld))\n\n               mean       2.5%     97.5%\nobserved 0.07400000 0.04900000 0.1040000\nfitted   0.07403453 0.04881904 0.1040163\n\nrbind(observed = dw_dia_mod, fitted = summarize(sim_dw_dia_mod))\n\n              mean     2.5%     97.5%\nobserved 0.1880000 0.125000 0.2640000\nfitted   0.1880237 0.123059 0.2625791\n\nrbind(observed = dw_dia_sev, fitted = summarize(sim_dw_dia_sev))\n\n             mean      2.5%     97.5%\nobserved 0.247000 0.1640000 0.3480000\nfitted   0.246962 0.1603662 0.3455071\n\n## visualize random values\nboxplot(\n  las = 1,\n  ylab = \"Disability Weight\",\n  cbind(\"Mild\" = sim_dw_dia_mld,\n        \"Moderate\" = sim_dw_dia_mod,\n        \"Severe\" = sim_dw_dia_sev))"
  },
  {
    "objectID": "posts/fitting-distributions/index.html#gamma-distribution",
    "href": "posts/fitting-distributions/index.html#gamma-distribution",
    "title": "Fitting distributions",
    "section": "Gamma distribution",
    "text": "Gamma distribution\n\n## function for fitting\nfit_gamma <-\nfunction(q, p = 0.95) {\n  p <- c(0, p) + (1 - p)/2\n\n  f <-\n    function(x, p, target) {\n      dev <- qgamma(p = p, shape = x[1], rate = x[2])\n      return(sum((dev - target) ^ 2))\n    }\n\n  fit <- optim(par = c(1, 1), fn = f, p = p, target = q)\n\n  return(fit$par)\n}"
  },
  {
    "objectID": "posts/sir-model/index.html",
    "href": "posts/sir-model/index.html",
    "title": "SIR model",
    "section": "",
    "text": "The classical SIR model is a useful example to understand how disease transmission models are constructed. The SIR model defines three states â€” susceptible, infectious, and recovered, and assumes that the only possible transitions are from susceptible to infectious, and from infectious to recovered.\nHere we implement the SIR model using three different approaches, to show the similarities between these approaches."
  },
  {
    "objectID": "posts/sir-model/index.html#parameter-values",
    "href": "posts/sir-model/index.html#parameter-values",
    "title": "SIR model",
    "section": "Parameter values",
    "text": "Parameter values\n\nN &lt;- 8900       # population size\nt &lt;- 20         # time steps\nbeta &lt;- 0.0004  # transmission probability\nalpha &lt;- 0.5    # recovery probability (corresponding to a duration of 1/0.5=2 time steps)"
  },
  {
    "objectID": "posts/sir-model/index.html#set-up-data-frame",
    "href": "posts/sir-model/index.html#set-up-data-frame",
    "title": "SIR model",
    "section": "Set up data frame",
    "text": "Set up data frame\n\npop &lt;-\n  data.frame(\n    DAY = seq(0, t),\n    S = numeric(t+1),\n    I = numeric(t+1),\n    R = numeric(t+1))\npop$S[1] &lt;- N - 1 # there needs to be 1 infectious person to start\npop$I[1] &lt;- 1\npop$R[1] &lt;- 0"
  },
  {
    "objectID": "posts/sir-model/index.html#run-model",
    "href": "posts/sir-model/index.html#run-model",
    "title": "SIR model",
    "section": "Run model",
    "text": "Run model\n\nfor (i in seq(t)) {\n  pop$S[i+1] &lt;-\n    pop$S[i] - pop$S[i] * (1 - (1 - beta)^pop$I[i])\n  pop$I[i+1] &lt;-\n    pop$I[i] + pop$S[i] * (1 - (1 - beta)^pop$I[i]) - pop$I[i] * alpha\n  pop$R[i+1] &lt;-\n    pop$R[i]                                        + pop$I[i] * alpha\n}"
  },
  {
    "objectID": "posts/sir-model/index.html#plot-results",
    "href": "posts/sir-model/index.html#plot-results",
    "title": "SIR model",
    "section": "Plot results",
    "text": "Plot results\n\nmatplot(\n  pop[, -1],\n  type = \"l\",\n  col = c(\"green\", \"red\", \"blue\"),\n  las = 1)"
  },
  {
    "objectID": "posts/sir-model/index.html#settings",
    "href": "posts/sir-model/index.html#settings",
    "title": "SIR model",
    "section": "Settings",
    "text": "Settings\n\n## load deSolve package\nlibrary(deSolve)\n\nWarning: package 'deSolve' was built under R version 4.2.2\n\n## create SIR function\nsir &lt;- function(time, state, parameters) {\n\n  with(as.list(c(state, parameters)), {\n\n    dS &lt;- -beta * S * I\n    dI &lt;-  beta * S * I - alpha * I\n    dR &lt;-                 alpha * I\n\n    return(list(c(dS, dI, dR)))\n  })\n}"
  },
  {
    "objectID": "posts/sir-model/index.html#initialisation",
    "href": "posts/sir-model/index.html#initialisation",
    "title": "SIR model",
    "section": "Initialisation",
    "text": "Initialisation\n\n## proportion in each compartment\ninit &lt;- c(S = 8699/8700, I = 1/8700, R = 0.0)\n\n## beta: infection parameter; alpha: recovery parameter\nparameters &lt;- c(beta = 1.5, alpha = 0.2)\n\n## time frame\ntimes &lt;- seq(0, 20, by = 0.1)"
  },
  {
    "objectID": "posts/sir-model/index.html#solve-using-ode-general-solver-for-ordinary-differential-equations",
    "href": "posts/sir-model/index.html#solve-using-ode-general-solver-for-ordinary-differential-equations",
    "title": "SIR model",
    "section": "Solve using ode (General Solver for Ordinary Differential Equations)",
    "text": "Solve using ode (General Solver for Ordinary Differential Equations)\n\nout &lt;- ode(y = init, times = times, func = sir, parms = parameters)"
  },
  {
    "objectID": "posts/sir-model/index.html#plot-results-1",
    "href": "posts/sir-model/index.html#plot-results-1",
    "title": "SIR model",
    "section": "Plot results",
    "text": "Plot results\n\n## change to data frame\nout &lt;- as.data.frame(out[, -1])\n\n## plot matrix\nmatplot(\n  x = times, y = out, type = \"l\", las = 1,\n  xlab = \"Time\", ylab = \"Proportion of population\", main = \"SIR Model\",\n  lwd = 1, lty = 1, bty = \"l\", col = c(\"green\", \"red\", \"blue\"))\n\n## add legend\nlegend(\n  \"topright\", c(\"Susceptible\", \"Infected\", \"Recovered\"),\n  pch = 1, col = c(\"green\", \"red\", \"blue\"))"
  },
  {
    "objectID": "posts/sir-model/index.html#parameter-values-1",
    "href": "posts/sir-model/index.html#parameter-values-1",
    "title": "SIR model",
    "section": "Parameter values",
    "text": "Parameter values\n\nN &lt;- 8900       # population size\nt &lt;- 20         # iterations\nbeta &lt;- 0.0004  # transmission probability\nalpha &lt;- 0.5    # recovery probability (corresponding to a duration of 1/0.5=2 time steps)"
  },
  {
    "objectID": "posts/sir-model/index.html#set-up-data-frame-1",
    "href": "posts/sir-model/index.html#set-up-data-frame-1",
    "title": "SIR model",
    "section": "Set up data frame",
    "text": "Set up data frame\n\npop &lt;- matrix(nrow = N, ncol = t+1)\npop[, 1] &lt;- c(\"I\", rep(\"S\", N-1))"
  },
  {
    "objectID": "posts/sir-model/index.html#run-model-1",
    "href": "posts/sir-model/index.html#run-model-1",
    "title": "SIR model",
    "section": "Run model",
    "text": "Run model\n\nfor (i in seq(t)) {\n  # identify S/I/R\n  is_S &lt;- pop[, i] == \"S\"\n  is_I &lt;- pop[, i] == \"I\"\n  is_R &lt;- pop[, i] == \"R\"\n\n  # calculate transition probability\n  beta_t &lt;- 1 - (1 - beta)^sum(is_I)\n  \n  # S may become I or stay S\n  pop[is_S, i+1] &lt;-\n    sample(\n      x = c(\"I\", \"S\"),\n      size = sum(is_S),\n      prob = c(beta_t, 1-beta_t),\n      replace = TRUE)\n  \n  # I may become R or stay I\n  pop[is_I, i+1] &lt;-\n    sample(\n      x = c(\"R\", \"I\"),\n      size = sum(is_I),\n      prob = c(alpha, 1-alpha),\n      replace = TRUE)\n  \n  # R stays R\n  pop[is_R, i+1] &lt;- pop[is_R, i]\n}"
  },
  {
    "objectID": "posts/sir-model/index.html#plot",
    "href": "posts/sir-model/index.html#plot",
    "title": "SIR model",
    "section": "Plot",
    "text": "Plot\n\npop_tab &lt;- apply(pop, 2, function(x) table(factor(x, c(\"S\", \"I\", \"R\"))))\nmatplot(\n  t(pop_tab),\n  type = \"l\",\n  col = c(\"green\", \"red\", \"blue\"),\n  las = 1)"
  },
  {
    "objectID": "posts/sir-model/index.html#parameter-values-2",
    "href": "posts/sir-model/index.html#parameter-values-2",
    "title": "SIR model",
    "section": "Parameter values",
    "text": "Parameter values\n\nN &lt;- 8900       # population size\nt &lt;- 20         # iterations\nbeta &lt;- 0.0004  # transmission probability\nalpha &lt;- 0.5    # recovery probability (corresponding to a duration of 1/0.5=2 time steps)"
  },
  {
    "objectID": "posts/sir-model/index.html#set-up-function",
    "href": "posts/sir-model/index.html#set-up-function",
    "title": "SIR model",
    "section": "Set up function",
    "text": "Set up function\n\nrun &lt;-\n  function() {\n    # set up population\n    pop &lt;- matrix(nrow = N, ncol = t+1)\n    pop[, 1] &lt;- c(\"I\", rep(\"S\", N-1))\n    \n    # run chains\n    for (i in seq(t)) {\n      # identify S/I/R\n      is_S &lt;- pop[, i] == \"S\"\n      is_I &lt;- pop[, i] == \"I\"\n      is_R &lt;- pop[, i] == \"R\"\n      \n      # calculate transition probability\n      beta_t &lt;- 1 - (1 - beta)^sum(is_I)\n      \n      # S may become I or stay S\n      pop[is_S, i+1] &lt;-\n        sample(\n          x = c(\"I\", \"S\"),\n          size = sum(is_S),\n          prob = c(beta_t, 1-beta_t),\n          replace = TRUE)\n      \n      # I may become R or stay I\n      pop[is_I, i+1] &lt;-\n        sample(\n          x = c(\"R\", \"I\"),\n          size = sum(is_I),\n          prob = c(alpha, 1-alpha),\n          replace = TRUE)\n      \n      # R stays R\n      pop[is_R, i+1] &lt;- pop[is_R, i]\n    }\n    \n    # summarize results\n    pop_tab &lt;-\n      t(apply(pop, 2, function(x) table(factor(x, c(\"S\", \"I\", \"R\")))))\n    \n    # return results\n    return(pop_tab)\n  }"
  },
  {
    "objectID": "posts/sir-model/index.html#run-model-2",
    "href": "posts/sir-model/index.html#run-model-2",
    "title": "SIR model",
    "section": "Run model",
    "text": "Run model\n\nruns &lt;- replicate(10, run())"
  },
  {
    "objectID": "posts/sir-model/index.html#plot-1",
    "href": "posts/sir-model/index.html#plot-1",
    "title": "SIR model",
    "section": "Plot",
    "text": "Plot\n\nmatplot(\n  runs[, , 1],\n  type = \"l\",\n  col = c(\"green\", \"red\", \"blue\"),\n  las = 1)\nfor (i in seq(2, 10))\n  matplot(\n    runs[, , i],\n    type = \"l\",\n    col = c(\"green\", \"red\", \"blue\"),\n    las = 1,\n    add = TRUE)"
  }
]